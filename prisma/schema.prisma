generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model AcceptedFriendship {
  id                                    String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId1                               String @db.Uuid
  userId2                               String @db.Uuid
  User_AcceptedFriendship_userId1ToUser User   @relation("AcceptedFriendship_userId1ToUser", fields: [userId1], references: [id], onDelete: Cascade)
  User_AcceptedFriendship_userId2ToUser User   @relation("AcceptedFriendship_userId2ToUser", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2])
  @@unique([userId2, userId1])
  @@schema("public")
}

model FriendshipRequest {
  userId                                String   @db.Uuid
  friendId                              String   @db.Uuid
  created_at                            DateTime @default(now())
  User_FriendshipRequest_friendIdToUser User     @relation("FriendshipRequest_friendIdToUser", fields: [friendId], references: [id], onDelete: Cascade)
  User_FriendshipRequest_userIdToUser   User     @relation("FriendshipRequest_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([friendId])
  @@index([userId])
  @@schema("public")
}

model Group {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String             @db.VarChar(50)
  createdAt        DateTime?          @default(now()) @db.Date
  isActive         Boolean?           @default(false)
  adminId          String             @db.Uuid
  User             User               @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ChatGroup_admin_id_fk")
  GroupMessage     GroupMessage[]
  MessageRecipient MessageRecipient[]

  @@schema("public")
}

model GroupMessage {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  group_id   String   @db.Uuid
  message_id String   @db.Uuid
  created_at DateTime
  is_active  Boolean  @default(false)
  Group      Group    @relation(fields: [group_id], references: [id])
  Message    Message  @relation(fields: [message_id], references: [id])

  @@schema("public")
}

model Message {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  messageBody      String
  createdAt        DateTime?          @default(now()) @db.Timestamptz(6)
  parentMessageId  String?            @db.Uuid
  expiryDate       DateTime?          @db.Date
  creatorId        String             @db.Uuid
  isFile           Boolean            @default(false)
  GroupMessage     GroupMessage[]
  User             User               @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  MessageRecipient MessageRecipient[]

  @@index([creatorId])
  @@schema("public")
}

model MessageRecipient {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipientId String   @db.Uuid
  groupId     String?  @db.Uuid
  isRead      Boolean? @default(false)
  messageId   String   @db.Uuid
  Group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ChatGroup_group_id_fk")
  Message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User        User     @relation(fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([recipientId])
  @@schema("public")
}

model Profile {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String  @unique @db.Uuid
  picture     String  @default("https://res.cloudinary.com/dlygf7xye/image/upload/v1736098504/00721c9db2261d4ab0f9528ba9f3c7f2e70f5330.png")
  initialized Boolean @default(false)
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model User {
  id                                                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                                            String               @db.VarChar(50)
  email                                               String               @unique
  password                                            String               @db.VarChar(64)
  created_at                                          DateTime             @default(now())
  AcceptedFriendship_AcceptedFriendship_userId1ToUser AcceptedFriendship[] @relation("AcceptedFriendship_userId1ToUser")
  AcceptedFriendship_AcceptedFriendship_userId2ToUser AcceptedFriendship[] @relation("AcceptedFriendship_userId2ToUser")
  FriendshipRequest_FriendshipRequest_friendIdToUser  FriendshipRequest[]  @relation("FriendshipRequest_friendIdToUser")
  FriendshipRequest_FriendshipRequest_userIdToUser    FriendshipRequest[]  @relation("FriendshipRequest_userIdToUser")
  Group                                               Group[]
  Message                                             Message[]
  MessageRecipient                                    MessageRecipient[]
  Profile                                             Profile?

  @@schema("public")
}
